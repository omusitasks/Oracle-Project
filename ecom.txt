-- online e-shop
-- drop database onlineshop;
-- create database onlineshop;
-- use onlineshop;

create table Customer
(
CustomerID varchar(10) not null,
First_Name varchar(20) NOT NULL,
Last_Name varchar(40) NOT NULL,
Email varchar(320) NOT NULL,
Phone_Number char(12) NULL,
city varchar(20) NOT NULL,
country varchar(32) NOT NULL,

primary key (CustomerID)
);

-- Employee

create table Employee
(
EmployeeID varchar(10) NOT NULL,
First_Name varchar(20) NOT NULL,
Last_Name varchar(40) NOT NULL,
Email varchar(320) NOT NULL,
Phone_Number char(12) NULL,
city varchar(20) NOT NULL,
country varchar(32) NOT NULL,

primary key (EmployeeID)
);

-- Product_Type

create table Product_Type
(
Product_TypeID varchar(10) not null,
Product_Type_Name varchar(100) not null,
Product_Type_Desc varchar(100) not null,

primary key (Product_TypeID)
);


-- Product

create table Product
(
ProductID varchar(10) not null,
Product_Title varchar(100) not null,
Product_desc varchar(100) null,
Unit_Price float not null,
languages varchar(10) null,
genre varchar(10) null,
Product_TypeID varchar(10) not null,
EmployeeID varchar(10) NOT NULL,
Release_Date varchar(20) null,

primary key (ProductID),
foreign key(Product_TypeID) 
        references Product_Type(Product_TypeID),
foreign key(EmployeeID) 
        references Employee(EmployeeID) 
);



-- ORDER_STATUS 

create table Order_Status
(
status_Order_ID VARCHAR(10) not null,
status varchar(40) not null,

primary key (Status_Order_ID)
);

-- Payment 

create table Payment
(
PaymentID varchar(10) NOT NULL,
payment_date DATE NULL,
total_amount float NOT NULL,
payment_type varchar(16) NOT NULL,

primary key (PaymentID)
);

-- Customer_Order 

create table Customer_Order 
(
Customer_OrderID varchar(10) NOT NULL,
CustomerID varchar(10) NOT NULL,
PaymentID varchar(10) NOT NULL,
status_Order_ID varchar(10) NOT NULL,
Order_Purchase_Timestamp DATE NULL,
Order_Approved_At DATE NULL,
Delivery_Date DATE NULL,

primary key (Customer_OrderID),
foreign key(CustomerID) 
        references Customer(CustomerID),
foreign key(status_Order_ID) 
        references Order_Status(status_Order_ID),
foreign key(PaymentID) 
        references Payment(PaymentID) 
);


-- Order_Products 

create table Order_Products
(
Customer_OrderID varchar(10) NOT NULL,
Order_ProductID varchar(10) NOT NULL,
ProductID varchar(10) NOT NULL,
EmployeeID varchar(10) NOT NULL,
quantity integer NOT NULL,

primary key (Order_ProductID),
foreign key(Customer_OrderID) 
        references Customer_Order (Customer_OrderID),
foreign key(ProductID) 
        references Product(ProductID),
foreign key(EmployeeID) 
        references Employee(EmployeeID) 
);


-- Insert statements

-- Insert into Customer
INSERT INTO Customer
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (128, 'Jane' , 'ytun' , 'sul@gmail.com', '+9192562732','Lloyds', 'USA');


INSERT INTO Customer
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (124, 'Brian', 'Smith', 'smith@gmail.com', '+9112562732','Lloyds', 'USA');


INSERT INTO Customer
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (125, 'Jannice', 'Joy', 'joy@gmail.com', '+9132562730','London', 'USA');


INSERT INTO Customer
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (126, 'Jannice', 'Cate', 'cate@gmail.com', '+9192562742','Los Angeles', 'USA');
  
  
INSERT INTO Customer
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (127, 'Brandy', 'Killy', 'brandy@gmail.com', '+9172562744','Bristol', 'USA');
 
-- Insert into Employee

INSERT INTO Employee
  ( EmployeeID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  ( 123, 'Jane' , 'Caroline' , 'carol@gmail.com', '+4492562732','Boston', 'UK');

INSERT INTO Employee
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (124, 'Willy', 'Andrew', 'andrew@gmail.com', '+4412562732','Lloyds', 'USA');
 

INSERT INTO Employee
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (125, 'John', 'Steve', 'steve@gmail.com', '+4432562730','London', 'USA');
 
INSERT INTO Employee
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (126, 'John', 'Billy', 'billy@gmail.com', '+9193562742','Las Vegas', 'UK');
 
INSERT INTO Employee
  ( CustomerID, First_Name, Last_Name, Email, Phone_Number, city, country )
VALUES
  (127, 'Bony', 'Key', 'bony@gmail.com', '+9172892744','Bristol', 'USA');

  
-- Insert into Product_Type
 

INSERT INTO Product_Type
  ( Product_TypeID, Product_Type_Name, Product_Type_Desc)
VALUES
  ( 1, 'music records' , 'Music is sold in form of pop, afro pop etc. The way music records are sold depends on whats trending' );

INSERT INTO Product_Type
  ( Product_TypeID, Product_Type_Name, Product_Type_Desc)
VALUES
  (2, 'movies', 'Movies are sold in form of series, scenes etc');

INSERT INTO Product_Type
  ( Product_TypeID, Product_Type_Name, Product_Type_Desc)
VALUES
  (3, 'books', 'Books are sold in various formats including ebooks, documents, thesis etc.');



-- Insert into Product

INSERT INTO Product
  ( ProductID, Product_Title, Product_desc, Unit_Price, languages, genre,  Product_TypeID, EmployeeID, Release_Date )
VALUES
  ( 123, 'My love' , 'R&B popular song' , 67.21, 'France','genre-a', 1, 123 , '11/12/2022');


INSERT INTO Product
  ( ProductID, Product_Title, Product_desc, Unit_Price, languages, genre,  Product_TypeID, EmployeeID, Release_Date )
VALUES
  (124, 'Lets be rich', 'Pop song', 13.44, 'Porguse', 'genre-c',1, 127 , '1/12/2022');


INSERT INTO Product
  ( ProductID, Product_Title, Product_desc, Unit_Price, languages, genre,  Product_TypeID, EmployeeID, Release_Date )
VALUES
  (125, 'Love and money', 'Love series', 90.09, 'Spanish', 'genre-b', 2,124 ,'10/12/2022');


INSERT INTO Product
  ( ProductID, Product_Title, Product_desc, Unit_Price, languages, genre,  Product_TypeID, EmployeeID, Release_Date )
VALUES
  (126, 'Unforgotable', 'New episode', 100.00, 'English', 'genre-b',2, 125, '5/12/2022');


INSERT INTO Product
  ( ProductID, Product_Title, Product_desc, Unit_Price, languages, genre,  Product_TypeID, EmployeeID, Release_Date )
VALUES
  (127, 'Become Rich Today', 'New book trending', 120.20, 'English', 'genre-b',3, 126,'4/12/2022');


-- Insert into Order_Status table

INSERT INTO Order_Status
  ( status, status_Order_ID)
VALUES
  ( 'Pending Payment', 1 );


INSERT INTO Order_Status
  ( status, status_Order_ID)
VALUES
  ('Confirmed - Awaiting shipment', 2);


INSERT INTO Order_Status
  ( status, status_Order_ID)
VALUES
  ('Shipped', 3);


INSERT INTO Order_Status
  ( status, status_Order_ID)
VALUES
  ('Delivered', 4);

INSERT INTO Order_Status
  ( status, status_Order_ID)
VALUES
   ('Shipped', 5);  


-- Insert into Payment table
 
INSERT INTO Payment
  ( PaymentID, payment_date, total_amount, payment_type )
VALUES
   ( 1 ,  '2022-12-20', 120, 'Credit card');  


INSERT INTO Payment
  ( PaymentID, payment_date, total_amount, payment_type )
VALUES
   (2, '2022-12-19', 120, 'Credit card');  


INSERT INTO Payment
  ( PaymentID, payment_date, total_amount, payment_type )
VALUES
   (3, '2022-12-17', 120, 'Pay pal');  


INSERT INTO Payment
  ( PaymentID, payment_date, total_amount, payment_type )
VALUES
   (4, '2022-12-18', 120, 'ATM');


INSERT INTO Payment
  ( PaymentID, payment_date, total_amount, payment_type )
VALUES
   (5, '2022-12-20', 120, 'Pay pal');  

  
-- Insert into Customer_Order table

INSERT INTO Customer_Order 
  ( Customer_OrderID, CustomerID, PaymentID, status_Order_ID, Order_Purchase_Timestamp, Order_Approved_At, Delivery_Date)
VALUES
   ( 103, 127 , 5 , 2, '2022-12-11', '2022-12-11', '2022-12-11');  


INSERT INTO Customer_Order 
  ( Customer_OrderID, CustomerID, PaymentID, status_Order_ID, Order_Purchase_Timestamp, Order_Approved_At, Delivery_Date)
VALUES
   (104, 127, 2, 1, '2022-11-11', '2022-11-11', '2022-12-1');  


INSERT INTO Customer_Order 
  ( Customer_OrderID, CustomerID, PaymentID, status_Order_ID, Order_Purchase_Timestamp, Order_Approved_At, Delivery_Date)
VALUES
   (105, 123, 3, 1, '2022-11-11', '2022-11-11', '2022-12-10');  


INSERT INTO Customer_Order 
  ( Customer_OrderID, CustomerID, PaymentID, status_Order_ID, Order_Purchase_Timestamp, Order_Approved_At, Delivery_Date)
VALUES
   ((106, 126,3, 4, '2022-11-11', '2022-11-11', '2022-12-5');  



INSERT INTO Customer_Order 
  ( Customer_OrderID, CustomerID, PaymentID, status_Order_ID, Order_Purchase_Timestamp, Order_Approved_At, Delivery_Date)
VALUES
   (107, 124, 1, 3, '2022-11-11', '2022-11-11', '2022-12-4');  


-- Insert into Order_Produts tables


INSERT INTO Order_Products 
  ( Customer_OrderID, Order_ProductID, ProductID, EmployeeID, quantity )
VALUES
   ( 103, 1 , 125, 125, 5);  
  
INSERT INTO Order_Products 
  ( Customer_OrderID, Order_ProductID, ProductID, EmployeeID, quantity )
VALUES
    (104, 2, 123, 124, 9); 

INSERT INTO Order_Products 
  ( Customer_OrderID, Order_ProductID, ProductID, EmployeeID, quantity )
VALUES
   (105, 3, 126, 123, 5); 

INSERT INTO Order_Products 
  ( Customer_OrderID, Order_ProductID, ProductID, EmployeeID, quantity )
VALUES
   (103, 4, 123, 123, 2); 


INSERT INTO Order_Products 
  ( Customer_OrderID, Order_ProductID, ProductID, EmployeeID, quantity )
VALUES
   (104, 5, 124, 126, 3); 

  
  
-- SQL Queries

-- 4. Provide SQL statements for the following queries:
--    a. Extract all the customers from a specific city.
  
SELECT * from Customer as c
WHERE
c.city = "Lloyds";

--    b. Search for a product of a specific genre

SELECT * from Product as p
WHERE
p.genre = 'genre-b';

--     c. Count how many customers are from a specific city.

SELECT COUNT(CustomerID)
FROM Customer
WHERE
city = "Lloyds";

--      d. Calculate the average of the unit price.
SELECT AVG(Unit_Price)
FROM Product;

--      e. Extract all current orders
SELECT * 
FROM
Customer_Order WHERE
Order_Purchase_Timestamp = "2022-12-11"
;

--       f. Extract all orders for books that has the keyword “the” in their description

SELECT *
FROM  Order_Products as op
INNER JOIN Product ON op.ProductID=Product.ProductID
WHERE 
Product.Product_desc LIKE '%the%';

--        g. Extract all payments with credit cards for music records.

SELECT *
FROM  Order_Products as op
INNER JOIN Product ON op.ProductID=Product.ProductID
INNER JOIN Product_Type ON Product.Product_TypeID=Product_Type.Product_TypeID
INNER JOIN Customer_Order ON op.Customer_OrderID=Customer_Order.Customer_OrderID
INNER JOIN Payment ON Customer_Order.PaymentID=Payment.PaymentID
WHERE 
Product_Type.Product_Type_Name = "music records" AND
Payment.payment_type = "Credit card"
;

--        h. Count how many employees handle music records.

SELECT COUNT(Employee.EmployeeID)
FROM Product 
INNER JOIN Employee ON Product.EmployeeID=Employee.EmployeeID
INNER JOIN Product_Type ON Product.Product_TypeID=Product_Type.Product_TypeID
WHERE
Product_Type.Product_Type_Name = "music records";

--        i. Count how many employees first name is John.

SELECT COUNT(EmployeeID)
FROM Employee
WHERE
Employee.First_Name = "John";

--        j. Count how many orders are in the system.

SELECT * 
FROM
Customer_Order;





